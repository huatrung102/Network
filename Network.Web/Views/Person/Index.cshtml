@model IEnumerable<Network.Domain.Entity.Person>
@using Network.Common.Helper
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h4>Person's List</h4>

<table class="table table-bordered" >
    <tr>
        <th>@Html.DisplayNameFor(model => model.PersonName)</th>
        <th>
            @Html.DisplayNameFor(model => model.PersonPhone)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PersonPosition)
        </th>
        <th>
           
        </th>
    </tr>
    
    <tbody data-bind='foreach: persons'>
        <tr>
            <td>
                <span class="" data-bind="text: PersonName">1</span>
            </td>
            <td>
                <span class="" data-bind="text: PersonPhone">1</span>
            </td>
            <td>
                <span class="" data-bind="text: PersonPosition">1</span>
            </td>
            <td>
                <button data-backdrop="static" data-keyboard="false" data-toggle="modal" 
                        data-target="#myModalDetail" data-bind="click: function(){$parent.viewDetail($data);} " name="" value=""
                        class="btn btn-xs btn-success">
                    Detail
                </button>
            </td>
        </tr>
    </tbody>
</table>
<div id="myModalDetail" class="modal fade" role="dialog">


</div>
        @*
            <p>
                @Html.ActionLink("Create New", "Create")
            </p>
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedOn)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ModifiedOn)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsDeleted)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PersonName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PersonPhone)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PersonPosition)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PersonDescription)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PersonType)
                    </th>

                    <th></th>
                </tr>



            </table>


            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedOn)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedOn)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.IsDeleted)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonPhone)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonPosition)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonDescription)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonType)
                    </td>

                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.PersonId }) |
                        @Html.ActionLink("Details", "Details", new { id = item.PersonId.ToString() },
               new Dictionary<string, object> {
               { "data-backdrop", "static" },
               { "data-keyboard", "false" },
               { "data-toggle", "modal" },
               { "data-target", "#myModalDetail" },
               });) |

                        @Html.ActionLink("Delete", "Delete", new { id = item.PersonId })
                    </td>
                </tr>
            }
        *@
        @section scripts {
            <section class="scripts">
                <script type="text/javascript">
                    function PersonVM(json) {
                        var self = this;
                        ko.mapping.fromJS(json, null, this);
                    }

                    var PersonViewModel = function (json) {
                        var self = this;
                        ko.mapping.fromJS(json, null, this);
                        self.person = ko.observable();
                        /*
                        var mapperSettings = {
                            'persons': {
                                create: function (options) {
                                    return new PersonVM(options.data, self);
                                }
                            }
                        };
                        */
                      //  ko.mapping.fromJS(json, mapperSettings, this);
                        
                        self.viewDetail = function (data) {
                            console.log('data:' + data)
                            self.person(data);
                            self.getDetailView({ id: data.PersonId() });
                        }
                        self.update = function (data) {

                        }
                        self.getDetailView = function (id) {
                            var paramsObj = id;
                            $.ajax({
                                method: "POST",
                                url: 'Person/GetPatrialView_Detail',
                                timeout: 15000,
                                contentType: "application/json; charset=utf-8",
                                async: false,
                                data: JSON.stringify(paramsObj)
                            }).success(function (data) {
                                console.log('html:' + data);
                                $('#myModalDetail').html(data);
                            });;
                        }

                    }

                    var model = JSON.parse(@Html.ModelToJSon(Model));
                    ko.applyBindings(new PersonViewModel({ persons: model }), document.getElementById("page-content"));
                </script>
            </section>
        }

