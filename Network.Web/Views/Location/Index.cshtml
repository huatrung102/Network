@model Network.Domain.DTO.LocationDTO

@using Network.Domain.Enum

@section CSS{
    <section class="css">
        <style>
            .map {
                margin: 0;
                padding: 0;
                height: 400px;
                max-width: none;
            }

                .map img {
                    max-width: none !important;
                }

            .gm-style-iw {
                width: 350px !important;
                top: 15px !important;
                left: 0px !important;
                background-color: #fff;
                box-shadow: 0 1px 6px rgba(178, 178, 178, 0.6);
                border: 1px solid rgba(72, 181, 233, 0.6);
                border-radius: 2px 2px 10px 10px;
            }

            #iw-container {
                margin-bottom: 10px;
            }

                #iw-container .iw-title {
                    font-family: 'Open Sans Condensed', sans-serif;
                    font-size: 22px;
                    font-weight: 400;
                    padding: 10px;
                    background-color: #48b5e9;
                    color: white;
                    margin: 0;
                    border-radius: 2px 2px 0 0;
                }

                #iw-container .iw-content {
                    font-size: 13px;
                    line-height: 18px;
                    font-weight: 400;
                    margin-right: 1px;
                    padding: 15px 5px 20px 15px;
                    max-height: 140px;
                    overflow-y: auto;
                    overflow-x: hidden;
                }

            .iw-content img {
                float: right;
                margin: 0 5px 5px 10px;
            }

            .iw-subTitle {
                font-size: 16px;
                font-weight: 700;
                padding: 5px 0;
            }

            .iw-bottom-gradient {
                position: absolute;
                width: 326px;
                height: 25px;
                bottom: 10px;
                right: 18px;
                background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%);
                background: -webkit-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%);
                background: -moz-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%);
                background: -ms-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%);
            }
        </style>

    </section>

}

@using Network.Common.Helper
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="col-md-5">
    <h2>Index</h2>

    <p>

        <a href="javascript:;" data-backdrop="static" data-keyboard="false" data-toggle="modal"
           data-target="#myModalCreate" data-bind="click: function(){createView();} ">Create New</a>

        <a href="javascript:;" data-bind="click: report ">report</a>

    </p>
    <table class="table">
        <tr>

            <th>
                @Html.DisplayNameFor(model => model.LocationName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocationCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocationAddress)
            </th>

            <th></th>
        </tr>
        <tbody data-bind='foreach: locations'>
            <tr data-bind="css:{'bg-primary': selected},click: $root.select,maps: map,latitude: LocationLatitude,longitude: LocationLongitude">
                <td>
                    <span class="" data-bind="text: LocationName">1</span>
                </td>
                <td>
                    <span class="" data-bind="text: LocationCode">1</span>
                </td>
                <td>
                    <span class="" data-bind="text: LocationAddress">1</span>
                </td>

                <td>
                    <button data-backdrop="static" data-keyboard="false" data-toggle="modal"
                            data-target="#myModalEdit" data-bind="click: $parent.editView" name="" value=""
                            class="btn btn-xs btn-success">
                        Edit
                    </button>

                    <button class="btn btn-xs btn-success" data-bind="click: function(){ viewMap($data);}">View map</button>
                </td>
            </tr>
        </tbody>


    </table>
</div>
<div class="col-md-7">
    <div class="box box-info">
        <div class="box-header">
            Map
            <input type="button" value="View fullscreen" class="btn btn-flat btn-info pull-right" data-bind="click: viewFullScreen" />
        </div>
        <div class="box-body">
            <style>
                .map {
                    height: 500px;
                }
            </style>
            <div>

                <!--<div class="map" data-bind="map: { latitude:  selectedDTO.latitude, longitude:  selectedDTO.longitude,locationName:  selectedDTO.locationName }">-->
                <div id="maps" class="map" data-bind1="maps: locations"></div>
                <!--   <div id="maps" class="map" data-bind="map: selectedDTO"></div>-->
            </div>
        </div>

    </div>
    <div class="box-footer">
    </div>
</div>
<div class="col-md-12">

</div>
<div class="col-md-12">
    
</div>


@section scripts {
    <section class="scripts">
        <script src="http://maps.google.com/maps/api/js?key=AIzaSyDNPMEE4w3D9ojQ5kC31OxsidNlNN7m5SI"></script>
        <script type="text/javascript">

            var modelLocation;
            var modelSelected;
            var locationVM;
            var dto = function (data) {
                var self = this;
                return ko.mapping.fromJS(data, null, self);
            }
            var MainViewModel = function (json) {
                var self = this;
                self.parent = ko.mapping.fromJS(json, null, this);
                self.DTO = ko.observable();
                self.selectedDTO = ko.observable();
                self.reportDTO = ko.observable();
                self.FileDTO = new dto(JSON.parse(@Html.ModelToJSon(
                new Network.Domain.DTO.FileAttachmentDTO())));

                self.documentType = ko.observableArray(JSON.parse('@(Html.EnumToJson<EType.DocumentTypeEnum>())'));
                self.contractType = ko.observableArray(JSON.parse('@(Html.EnumToJson<EType.ContractTypeEnum>())'));
                self.departmentGroup = ko.observableArray(JSON.parse('@(Html.EnumToJson<EType.DepartmentGroupEnum>())'));

                self.locations = ko.observableArray();
                self.isEdit = ko.observable(false);



                self.selectedRow = {};
                self.oldselectedDTO = ko.observable();
                self.LookupEnum = function (options, value) {
                    return LookupEnum(options, value);
                };
                self.numberWithCommas = function(x){
                    return numberWithCommas(x);
                }
                self.editView = function (data, event) {

                    self.isEdit(true);
                    //   event.preventDefault();
                    // event.stopPropagation();
                    //   data._mapMarkerSingle = data._mapMarker;
                    self.selectedDTO(data);
                    modelSelected = self.selectedDTO;
                    //   self.DTO(data);
                    self.selectedDTO.subscribe(function (newValue) {
                        if (self.isEdit()) {
                            var center = new google.maps.LatLng(newValue.LocationLatitude(), newValue.LocationLongitude());
                            mapEdit.setCenter(center);
                        }

                    });
                };
                self.viewFile = function (id, name) {

                    //  self.FileDTO.FileName(name);
                    // self.FileDTO.FileAttachmentId(id);
                    window.location = '/FileAttachment/Download?fileGuid=' + id
                          + '&filename=' + name;

                    @*var paramsObj = { dto: ko.mapping.toJSON(self.FileDTO) }
                    $.ajax({
                        method: "POST",
                        url: '@Url.Action("DownloadDocument", "FileAttachment")',
                        timeout: 7000,
                        contentType: "application/json; charset=utf-8",
                        async: false,
                        data: JSON.stringify(paramsObj)
                    }).fail(function () {
                        toastr.error("Action failed !.");
                    }).success(function (data) {
                        /*
                        $("#DisplayPDF").html(
                            $('<iframe>', {
                                src: this.href,
                                width: '600px',
                                height: "800px"
                            })
                        );*/
                    });*@
                }

                self.report = function () {
                    if (self.selectedRow.LocationId !== undefined) {
                        var locationId = self.selectedRow.LocationId();
                        var paramsObj = { data: locationId };
                        $.ajax({
                            method: "POST",
                            url: '@Url.Action("getLocationReportPatrialView")',
                            timeout: 15000,
                            contentType: "application/json; charset=utf-8",
                            async: false,
                            data: JSON.stringify(paramsObj)
                        }).success(function (datas) {
                            var data = JSON.parse(datas);
                            if (data != undefined) {
                                self.reportDTO(ko.mapping.fromJS(data));
                                $('#myModalReport').modal(
                                {
                                    backdrop: 'static',
                                    keyboard: false  // to prevent closing with Esc button (if you want this too)
                                });


                                /*
                                self.departmentsSorted = ko.computed(function () {
                                    return self.reportDTO().Departments().sort(function (left, right) {
                                        return left.DepartmentName() == right.DepartmentName() ?
                                             0 :(left.DepartmentName() < right.DepartmentName() ? -1 : 1);
                                    });
                                });
                                */
                            } else {
                                toastr.error("No data report for location !.");
                            }
                        });
                    } else {
                        toastr.error("Not select location yet !.");
                    }

                }
                self.select = function (data, event) {
                    if (self.selectedRow.selected !== undefined) {
                        self.oldselectedDTO = self.selectedRow;
                        self.oldselectedDTO.selected(false);
                    }
                    self.selectedRow = data;
                    data.selected(true);
                    //  data._mapMarkerSingle = data._mapMarker;

                    // self.selectedDTO(data);

                };


                self.loadTable = function () {
                    self.locations.removeAll();
                    $.ajax({
                        method: "GET",
                        url: '@Url.Action("getAllEntity")',
                        async: false,
                        contentType: "application/json; charset=utf-8",
                    }).done(function (datas) {
                        var data = JSON.parse(datas);
                        if (data.length > 0) {
                            var mappedObj = $.map(data, function (item) {
                                return new dto(item);
                            });
                            if (mappedObj.length === 0) {
                                var p = new dto(json);
                                self.locations.push(p);
                            } else self.locations(mappedObj);
                        }

                    });
                }


                self.viewFullScreen = function () {

                }
                self.createView = function () {
                    // self.DTO(new dto(json));
                }
                self.create = function () {
                    var controller = '@ViewContext.RouteData.Values["Controller"].ToString()';

                    var messageCreateOK = String.format('@Res.GlobalResource.Action_Create_Success', controller);
                    var paramsObj = { dto: ko.mapping.toJSON(self.DTO) }
                    $.ajax({
                        method: "POST",
                        url: '@Url.Action("Create")',
                        timeout: 7000,
                        contentType: "application/json; charset=utf-8",
                        async: false,
                        data: JSON.stringify(paramsObj)
                    }).fail(function () {
                        toastr.error("Action failed !.");

                    }).success(function (data) {
                        data = JSON.parse(data);
                        if (data.ResponseCode == 1) {
                            toastr.success(messageCreateOK);
                            $('#myModalEdit').modal('hide')
                            self.loadTable();

                            //   map.clearMarkers();
                            //   window.location.href='@(Url.Action("Index", "Location"))';
                            @*{ Response.Redirect("~/Location/");}*@
                } else {
                    console.log('error:' + data);
                }

            });;


            }
            self.edit = function () {
                var controller = '@ViewContext.RouteData.Values["Controller"].ToString()';

                var messageCreateOK = String.format('@Res.GlobalResource.Action_Create_Success', controller);
                var paramsObj = { dto: ko.toJSON(self.selectedDTO) }
                $.ajax({
                    method: "POST",
                    url: '@Url.Action("Edit")',
                    timeout: 7000,
                    contentType: "application/json; charset=utf-8",
                    async: false,
                    data: JSON.stringify(paramsObj)
                }).fail(function () {
                    toastr.error("Action failed !.");

                }).success(function (data) {
                    data = JSON.parse(data);
                    if (data.ResponseCode == 1) {
                        toastr.success(messageCreateOK);
                        $('#myModalEdit').modal('hide')
                        self.loadTable();
                        //   map.clearMarkers();
                        window.location.href = '@(Url.Action("Index", "Location"))';
                        @*{ Response.Redirect("~/Location/");}*@
                    } else {
                        console.log('error:' + data);
                    }

                });;
            }
            self.loadTable();
            createMap();
            createMapSingle();
            createMapEdit();
            //khởi tạo DTO for create new
            self.DTO(new dto(json));
            //de khoi tao _mapMarkerSingle
            //    self.selectedDTO = ko.mapping.fromJS(self.DTO);
            modelLocation = self.DTO;

            //  self.selectedDTO(new dto(json));
            //modelSelected = self.selectedDTO;

            locationVM = self;

            }

            function createMapEdit() {
                //center of vietnam
                var latlng = new google.maps.LatLng(16.2903198, 107.020065);
                var myOptions =
                {
                    zoom: 6,
                    center: latlng,
                    panControl: false,
                    zoomControl: false,
                    zoomControlOptions: {
                        style: google.maps.ZoomControlStyle.BIG,
                        position: google.maps.ControlPosition.TOP_RIGHT
                    },
                    scaleControl: false,
                    streetViewControl: false,
                    overviewMapControl: false,
                    mapTypeControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };

                mapEdit = new google.maps.Map(document.getElementById("mapEdit"), myOptions);
                google.maps.event.addDomListener(window, 'load', function () {
                    console.log('mapEdit');
                });
                google.maps.event.addListener(mapEdit, 'click', function (event) {
                    if (modelSelected() != undefined) {
                        modelSelected().LocationLatitude(event.latLng.lat());
                        modelSelected().LocationLongitude(event.latLng.lng());
                    }
                });
            }

            function createMapSingle() {
                //center of vietnam
                var latlng = new google.maps.LatLng(16.2903198, 107.020065);
                var myOptions =
                {
                    zoom: 4,
                    center: latlng,
                    panControl: false,
                    zoomControl: false,
                    zoomControlOptions: {
                        style: google.maps.ZoomControlStyle.BIG,
                        position: google.maps.ControlPosition.TOP_RIGHT
                    },
                    scaleControl: false,
                    streetViewControl: false,
                    overviewMapControl: false,
                    mapTypeControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };

                mapSingle = new google.maps.Map(document.getElementById("mapSingle"), myOptions);
                google.maps.event.addDomListener(window, 'load', function () {
                    console.log('mapSingle');
                });
                google.maps.event.addListener(mapSingle, 'click', function (event) {
                    if (modelLocation() != undefined) {
                        modelLocation().LocationLatitude(event.latLng.lat());
                        modelLocation().LocationLongitude(event.latLng.lng());
                    }
                });
            }

            function createMap() {
                //center of vietnam
                var latlng = new google.maps.LatLng(15.9857498, 105.7729918);
                var myOptions =
                {
                    zoom: 5,
                    center: latlng,
                    panControl: false,
                    zoomControl: false,
                    zoomControlOptions: {
                        style: google.maps.ZoomControlStyle.BIG,
                        position: google.maps.ControlPosition.TOP_RIGHT
                    },
                    scaleControl: false,
                    streetViewControl: false,
                    overviewMapControl: false,
                    mapTypeControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };

                map = new google.maps.Map(document.getElementById("maps"), myOptions);
                google.maps.event.addDomListener(window, 'load', function () {
                    console.log('map');
                });
            }

            $(document).ready(function () {
                //http://stackoverflow.com/a/11743005/4177526
                $('#myModalEdit').on('shown.bs.modal', function () {
                    google.maps.event.trigger(mapEdit, "resize");
                });
                $('#myModalCreate').on('shown.bs.modal', function () {
                    google.maps.event.trigger(mapSingle, "resize");
                });
                var model = JSON.parse(@Html.ModelToJSon(Model));
                // createMap();
                ko.applyBindings(new MainViewModel(model), document.getElementById("page-content"));
            });
        </script>
    </section>
}

<div id="myModalEdit" class="modal fade" role="dialog">
    @Html.Partial("Edit", Model)
</div>

<div id="myModalCreate" class="modal fade" role="dialog">
    @Html.Partial("Create", Model)
</div>
<div id="myModalReport" class="modal fade" role="dialog">
    @Html.Partial("LocationReport", new Network.Domain.DTO.LocationReportDTO())

</div>

@*

    <!--ko if: self.selectedRow.selected !== undefined-->
    <div>
        @Html.Partial("ReportLocation",Model)
    </div>
    <!--/ko-->*@
